/*
 * *
 *  * Licensed to the Apache Software Foundation (ASF) under one or more
 *  * contributor license agreements.  See the NOTICE file distributed with
 *  * this work for additional information regarding copyright ownership.
 *  * The ASF licenses this file to You under the Apache License, Version 2.0
 *  * (the "License"); you may not use this file except in compliance with
 *  * the License.  You may obtain a copy of the License at
 *  * <p>
 *  * http://www.apache.org/licenses/LICENSE-2.0
 *  * <p>
 *  * Unless required by applicable law or agreed to in writing, software
 *  * distributed under the License is distributed on an "AS IS" BASIS,
 *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  * See the License for the specific language governing permissions and
 *  * limitations under the License.
 *
 */
package io.bsoa.rpc.transport.netty;

import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.bsoa.rpc.bootstrap.Bootstraps;
import io.bsoa.rpc.bootstrap.ConsumerBootstrap;
import io.bsoa.rpc.config.ConsumerConfig;
import io.bsoa.rpc.context.BsoaContext;
import io.bsoa.test.HelloService;

/**
 * <p></p>
 *
 * Created by zhangg on 2016/12/18 10:58. <br/>
 *
 * @author <a href=mailto:zhanggeng@howtimeflies.org>GengZhang</a>
 */
public class ConsumerMutisTest {

    /**
     * slf4j Logger for this class
     */
    private final static Logger LOGGER = LoggerFactory.getLogger(ClientTransportTest.class);

    public static void main(String[] args) throws InterruptedException {
        ConsumerConfig<HelloService> consumerConfig = new ConsumerConfig<>();
        consumerConfig.setInterfaceId(HelloService.class.getName());
        consumerConfig.setTags("tag1");
        consumerConfig.setSerialization("hessian");
        consumerConfig.setUrl("bsoa://127.0.0.1:22222");
        ConsumerBootstrap<HelloService> bootstrap = Bootstraps.from(consumerConfig);
        HelloService helloService = bootstrap.refer();

        LOGGER.warn("started at pid {}", BsoaContext.PID);
        try {
            String s = helloService.sayHello("xxx", 22);
            LOGGER.info("{}", s);
        } catch (Exception e) {
            LOGGER.error("", e);
        }
        final int threads = 50;
        final AtomicLong cnt = new AtomicLong(0);
        final ThreadPoolExecutor service1 = new ThreadPoolExecutor(threads, threads, 0L, TimeUnit.MILLISECONDS, new SynchronousQueue<Runnable>());// 无队列
        for (int i = 0; i < threads; i++) {
            service1.execute(new Runnable() {
                @Override
                public void run() {
                    int n = 0;
                    while (true) {
                        try {
                            helloService.sayHello("xxx", 2);
                            // 1k
                            //service.echoStr("10241234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
                            // 5k
                            //service.echoStr
                            cnt.incrementAndGet();
                        } catch (Exception e) {
                            LOGGER.error("",e );
                        }
                    }
                }
            });
        }

        Thread thread = new Thread(new Runnable() {
            private long last = 0;
            @Override
            public void run() {
                while (true) {
                    long count = cnt.get();
                    long tps = count - last;
                    LOGGER.warn("last 1s invoke: {}, queue: {}", tps, service1.getQueue().size());
                    last = count;

                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                    }
                }
            }
        },"Print-tps-THREAD");
        thread.start();
    }

}