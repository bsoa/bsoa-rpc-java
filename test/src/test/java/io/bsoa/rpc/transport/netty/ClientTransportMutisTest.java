/*
 * Copyright © 2016-2017 The BSOA Project
 *
 * The BSOA Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
package io.bsoa.rpc.transport.netty;

import io.bsoa.rpc.client.ProviderInfo;
import io.bsoa.rpc.context.BsoaContext;
import io.bsoa.rpc.message.BaseMessage;
import io.bsoa.rpc.message.MessageBuilder;
import io.bsoa.rpc.message.RpcRequest;
import io.bsoa.rpc.transport.ClientTransport;
import io.bsoa.rpc.transport.ClientTransportConfig;
import io.bsoa.rpc.transport.ClientTransportFactory;
import io.bsoa.test.TestService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;

/**
 * <p></p>
 * <p>
 * Created by zhangg on 2016/12/18 10:58. <br/>
 *
 * @author <a href=mailto:zhanggeng@howtimeflies.org>GengZhang</a>
 */
public class ClientTransportMutisTest {

    /**
     * slf4j Logger for this class
     */
    private final static Logger LOGGER = LoggerFactory.getLogger(ClientTransportMutisTest.class);

    public static void main(String[] args) throws InterruptedException {
        ClientTransportConfig config = new ClientTransportConfig();
        ProviderInfo providerInfo = ProviderInfo.getProvider("127.0.0.1", 22222);
        config.setProviderInfo(providerInfo);
        config.setConnectionNum(1);

        ClientTransport transport = ClientTransportFactory.getClientTransport(config);
        try {
            transport.connect();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

        }
        LOGGER.warn("started at pid {}", BsoaContext.PID);
        final int threads = 50;
        final AtomicLong cnt = new AtomicLong(0);
        final ThreadPoolExecutor service1 = new ThreadPoolExecutor(threads, threads, 0L, TimeUnit.MILLISECONDS, new SynchronousQueue<Runnable>());// 无队列
        for (int i = 0; i < threads; i++) {
            service1.execute(new Runnable() {
                @Override
                public void run() {
                    int n = 0;
                    while (true) {
                        try {
//                            HeartbeatRequest request = new HeartbeatRequest();
//                            request.setTimestamp(System.currentTimeMillis());
                            RpcRequest request = MessageBuilder.buildRpcRequest(TestService.class, "str",
                                    new Class[]{String.class},
                                    new Object[]{"xxx"});
                            request.setTags("tag1");
                            request.setProtocolType((byte) 10);
                            request.setSerializationType((byte) 2);
                            BaseMessage response = transport.syncSend(request, 60000);

                            // 1k
                            //service.echoStr("10241234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
                            // 5k
                            //service.echoStr
                            cnt.incrementAndGet();
                        } catch (Exception e) {
                            LOGGER.error("", e);
                        }
                    }
                }
            });
        }

        Thread thread = new Thread(new Runnable() {
            private long last = 0;

            @Override
            public void run() {
                while (true) {
                    long count = cnt.get();
                    long tps = count - last;
                    LOGGER.warn("last 1s invoke: {}, queue: {}", tps, service1.getQueue().size());
                    last = count;

                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                    }
                }
            }
        }, "Print-tps-THREAD");
        thread.start();
    }

}
